Notes

Shots
- convert switches to other events with some modifiers
- sequence of switches within a time period as well

Achievements
- Mode inserts like the Cards in IJ 
- off, blinking, solid 

Holds
- defines a set of hold and release conditions for a ball device
- transient locks , not ball 'locks'

Ball Locks
- Deprecated

Multiball Locks
- How many balls to hold
- acounts for virtual / holding across turns with other people taking physical balls in between
- spits out a full event when full which can trigger multiball mode or whatever

Ball Save
- specifically time periods that re-serve any drains

Ball bonus
- end of ball bonus calculating

Carousel
- an itemized list that can be used for mode selection

combo switches
- simultaneous switch turned into it's own even (both flippers together = cancel is a built in one)

extra balls
- can be awarded once

high scores
- entering / maintaining high score lists

logic blocks - note default is to disable after they've run but can be overridden
	there's also discussion about how to use say the counter one where there is an event each time the counter increments
	(_updated event) which can be used to escalate a show.. so, each time another increment, play the same or a different show based on
	the counter value

	- accruals
	one or more events triggers another event (any order)

	- counters 
	generate a new event after some event happenns X amount of times
	also used to ensure something happens once only.. this is lit, make shot (count of 1) then send out a new event that starts mode, but that should happen once ever

	- sequences
	events in a specific order triggers another event 

Modes
	the main classes.  An event to activate one, priorties set to see which one is most active
	container for all these game logic notices on a temporary basis
	some 'base' mode for when nothing else is running
	in addition to game logic, can have shows and slides ; most things that can go in config.yaml as well (excapt devices)
	
multiball
	defining a multiball.. how many balls, start / stop events which ball devices to use
	
player variables
	custom variables stored per user
	the manual seems to suggest they don't work too well in config files compared to actual code
	
timed_switch
	duration of a switch press = another event 
	flipper cradle is their example

timers
	arbitrary timers with tick increments, completion times etc
	events can start, stop, pause
	events on each tick
	events complete
	
shot
	wrapper for switch or set of switches (within a time or after a time)
	adds state, can tie shows to states (led blinking, flashing, etc)

scoring 
	assign a score increment to an event

---- SHOWS ------
set of things to be done in order with time constraints (so, playback steps)
time delays, durations etc
loops
what can you put? Players
when players are in a show, they lose the _player add an s
so:
led_player: -> leds
sound_player -> sounds
slide_player: -> slides

can parameterize (show_tokens is their term) so a show can be applied to different items like leds
-> works like #defines so there's no type checking or anything, it replaces the strings

starting and stopping?
- stop when a mode stops
- start via show_player tag, what is below is a list of events, then the show to run
- you can manipulate the show a bit in the show_player setup..  loops, slow down, speed up the play of a show
- some sync mechanisms too to try to keep multiple shows kicking off at same time vs in sequence (for when precise sync matters)


---- PLAYERS -----
most entries of a player are event names.. so, things to do when an event happens

config | shows 

bcp_player | bcps
- backbox control protocol
- connection between game and the media controller
- not used in examples, probably not used much

coil_player | coils
- pulse / enable / disable

event_player | events
- send events when an event happens
- always live if in config file (or machine wide or mode ok)
- no example of use in show, seems to make more sense as config
- looks better than single event accruals if want live all the time  

flasher_player | flashers
- not much info.. looks like a duration

gi_player | gis
led_player | leds
light_player | lights

queue_event_player | N/A
- like event player but for "queue" events
- queue_event: ending
- events_when_finished: ended

so, all handlers will trigger on ending , when they are done, ended will trigger

queue_relay_player | N/A
- looks like how you register handler for a queue event
- per queue event, there is post: <regular event> and wait_for: <some other regular event>
- its at the end of the wait for that the queue event player will mark at least your handler finished

random_event_player | random_events
show_player | shows
slide_player | slides
sound_loop_set_player | sound_loop_sets
sound_player | sounds
track_player | tracks
trigger_player | trigger
widget_player | widgets

----- EVENTS -----
Two types:
Basic
-- name, maybe keyword:argument pairs
-- event manager call registered handlers 1 by 1 by priority order

Queue Evennts
- 'ending is posted
- do stuff
- 'ended is posted

which ones are queue events?
- seems like have to dig around in event reference.. 
- there's a naming pattern where xxx-ing are queue events
ball_ending 
ball_starting
game_ending
mode_starting
player turn starting
player turn ending
game starting
player adding
balldevice eject attempt
- all the initialize / reset phasese are queue reley events

handling events:
- players generally trigger off events
- event fields in config items..  "reset_events" "events_when_finished" etc


--- Config file reference ---
config: 
- can have lists of other config files to organize

